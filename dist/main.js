(()=>{"use strict";var t={28:(t,e,n)=>{n.d(e,{Z:()=>A});var r=n(537),i=n.n(r),o=n(645),a=n.n(o),s=n(667),d=n.n(s),c=new URL(n(495),n.b),u=a()(i());u.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Urbanist:wght@200&display=swap);"]);var l=d()(c);u.push([t.id,`:root {\n    margin: 0;\n    padding: 0;\n    background-color: #fdfdfd;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 18px;\n    color: #3a3a3a;\n    --palate-linen: hsl(28, 55%, 96%);\n    --palate-cyan: hsl(182, 92%, 82%);\n    --palate-light-purple: hsl(275, 90%, 88%);\n}\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n@font-face {\n    font-family: 'Ubuntu';\n    src: url(${l}) format('ttf');\n    font-style: normal;\n}\n\nbody {\n    min-height: 100vh;\n    background: lightblue;\n}\n\n.grid-container {\n    min-height: 100vh;\n    background: hsl(358, 91%, 96%);\n    display: grid;\n    grid-template-columns: max(236px, 16%) 1fr;\n    column-gap: 5px;\n}\n\n.navbar {\n    display: grid;\n    grid-template-rows: repeat(auto-fit, minmax(24px, min-content));\n    row-gap: 0.4rem;\n    font-family: 'Ubuntu', 'Mulish', Arial, Helvetica, sans-serif;\n    background: var(--palate-cyan);\n    border-right: 1px solid #444;\n    border-radius: 0px 3px 0px 0px;\n    box-shadow: 1px 0px 2px #555;\n    padding: 0.75rem 0;\n}\n\n.navbar h1 {\n    font-family: 'Urbanist', sans-serif;\n    font-size: 2.4rem;\n    font-weight: 200;\n    grid-column: 1 / -1;\n    text-align: center;\n}\n\n.navbar h2 {\n    font-size: 1.3rem;\n    font-weight: 400;\n}\n\n.navbar p {\n    color: #444;\n    font-weight: 400;\n    font-size: 1.1rem;\n}\n\n.navbar > .nav-item p {\n    font-weight: 300;\n    font-size: 1rem;\n\n}\n\n.navbar .icon {\n    cursor: pointer;\n    height: 100%;\n    width: calc(height);\n    padding: 0.25rem;\n}\n\n.navbar .icon:hover {\n    background: rgba(255, 255, 255, 0.6);\n    border-radius: 8px;\n}\n\n.navbar > .nav-item {\n    padding: 0 0.3rem;\n    display: grid;\n    grid-template-columns: 54px 1fr;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.navbar > .nav-item:first-child {\n    font-family: 'Urbanist', Arial, Helvetica, sans-serif;\n    height: min-content;\n    background: hsla(0, 5%, 5%, 0.8);\n    color: #fefefe;\n    padding: 0.5rem;\n    margin-bottom: 0.5rem;\n}\n\n.navbar > .nav-item > img:first-child {\n    justify-self: end;\n}\n\n.navbar > #projects-sidebar > .sidebar-link {\n    font-weight: 300;\n    cursor: pointer;\n    text-decoration: none;\n    color: inherit;\n}\n\n.sidebar-project {\n    margin-bottom: 0.4rem;\n}\n\n.navbar > .end-nav-item {\n    padding-left: 1.25rem;\n}\n\n#project-nav {\n    position: relative; \n}\n\n#projects-sidebar {\n    margin-left: 0.85rem;\n    margin-bottom: 1.8rem;\n}\n\n#content {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(380px, 0.65fr));\n    grid-template-rows: repeat(auto-fit, minmax(360px, min-content));\n    gap: 1.75rem;\n    padding: 1rem 2.25rem 2rem;\n    letter-spacing: 0.015rem;\n}\n\n.project-card {\n    border: 1px solid #333;\n    box-shadow: 1px 1px 2px lightgray;\n    border-radius: 1rem;\n    background: var(--palate-linen);\n    padding: 0.9rem;\n    margin: 0.5rem 0.5rem 0;\n    min-height: 360px;\n    height: min-content;\n}\n\n.project-header {\n    font-family: 'Ubuntu', 'Mulish', Helvetica, 'Arial', sans-serif;\n    font-weight: 200;\n    font-size: 1.1rem;\n    padding: 0.25rem 0.35rem;\n    border-bottom: 1px solid gray;\n    margin-bottom: 0.6rem;\n    justify-content: space-between;\n    display: flex;\n    align-items: center;\n}\n\n.project-header > .project-icons {\n    margin-left: auto;\n    display: flex;\n    gap: 0.75rem;\n}\n\n.project-header > h2 {\n    font-weight: lighter;\n}\n\n.project-header > .project-icons > * {\n    width: 26px;\n    height: 26px;\n    cursor: pointer;\n}\n\n.task-container {\n    margin-top: 0.4rem;\n    background: #fefefe;\n    border-radius: 8px;\n    border: 1px solid lightgrey;\n    font-size: 0.9em;\n}\n\n.task-body {\n    display: flex;\n    justify-content: space-between;\n    border-top: 1px solid lightgray;\n    padding: 0.1rem 0.25rem 0.25rem;\n    margin: 0 0.5rem;\n    gap: 0.5rem;\n}\n\n.task-icons-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    gap: 0.25rem;\n    margin: 0.2rem 0;\n}\n\n.task-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    cursor: pointer;\n    gap: 0.9rem;\n    padding: 0.3rem 0.65rem;\n    font-weight: 300;\n}\n\n.task-header > p:first-child {\n    font-size: 1rem;\n    font-weight: 600;\n    margin-right: auto;\n}\n\n.task-header > p:nth-child(2) {\n    min-width: max-content;\n}\n\n.task-header > .icon-expand {\n    min-width: 18px;\n    width: 18px;\n    height: calc(width);\n}\n\n.task-body > * {\n    margin-top: 0.2rem;\n}\n\n.task-info {\n    width: 100%;\n    padding: 0 0.25rem 0 0;\n    margin-bottom: 0.2rem;\n    display: grid;\n    grid-template-columns: max-content 1fr;\n    row-gap: 0.5rem;\n    align-items: center;\n}\n\n.task-info > p:first-child {\n    grid-column: 1 / -1;\n    font-weight: 300;\n    justify-self: start;\n}\n\n.task-info > .completion-status {\n    font-size: 0.85rem;\n    justify-self: end;\n}\n\n.task-priority {\n    border-radius: 1.4rem;\n    width: min-content;\n    font-size: 0.58rem;\n    font-weight: 700;\n    padding: 0.1rem 0.45rem;\n}\n\n.task-icons-container > * {\n    height: 18px;\n    width: 18px;\n    cursor: pointer;\n}\n\n.form-container {\n    position: relative;\n}\n\nform {\n    font-size: 0.9rem;\n    font-family: 'Ubuntu', Arial, Helvetica, sans-serif;\n    z-index: 1;\n    position: absolute;\n    top: 19px;\n    left: 20px;\n    padding: 0.65rem;\n    height: max-content;\n    width: 220px;\n    background: #fefefe;\n    border: 2px solid var(--palate-light-purple);\n    border-radius: 8px;\n}\n\nform input, select, option {\n    outline: none;\n    height: 1.1rem;\n    width: 10.5rem;\n    font-size: 0.8rem;\n    display: inline;\n    margin: 0.2rem 0 0.4rem;\n    padding: 3px;\n    border-radius: 5px;\n}\n\nform input[type=checkbox] {\n    width: 1rem;\n}\n\nform select {\n    height: 1.5rem;\n    width: 4.5rem;\n}\n\nform input:invalid {\n    border: 1px solid orangered;\n}\n\nform input:valid {\n    border: 1px solid lightgray;\n}\n\nform input:focus {\n    outline: none;\n    border: 1px solid gray;\n    box-shadow: inset 1px 1px lightgray,\n                inset -1px -1px lightgray;\n}\n\nform label, button {\n    font-size: 0.9rem;\n    display: block;\n    width: max-content;\n    font-weight: 400;\n}\n\nform > .form-title {\n    border-bottom: 1px solid lightgray;\n    margin-bottom: 0.5rem;\n}\n\nform h4 {\n    font-weight: 500;\n}\n\nform > .form-row {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0 0.1rem;\n    margin: 0.15rem 0;\n}\n\nform > #delete-row {\n    justify-content: flex-start;\n    align-items: center;\n    gap: 0.45rem;\n    margin-left: 0.05rem;\n}\n\nform button {\n    padding: 0.3rem 0.4rem;\n    background: var(--palate-light-purple);\n    border-radius: 14px;\n    border: 1px solid #666;\n    box-shadow: 1px 1px 1px lightgray;\n    margin-left: auto;\n    margin-top: 0.25rem;\n    cursor: pointer;\n}\n\n#project-form {\n    top: unset;\n    bottom: 48px;\n    left: 30px;\n    width: 240px;\n}\n`,"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"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",sourcesContent:[":root {\n    margin: 0;\n    padding: 0;\n    background-color: #fdfdfd;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 18px;\n    color: #3a3a3a;\n    --palate-linen: hsl(28, 55%, 96%);\n    --palate-cyan: hsl(182, 92%, 82%);\n    --palate-light-purple: hsl(275, 90%, 88%);\n}\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n@font-face {\n    font-family: 'Ubuntu';\n    src: url('./fonts/Ubuntu-Light.ttf') format('ttf');\n    font-style: normal;\n}\n\n\n@import url('https://fonts.googleapis.com/css2?family=Urbanist:wght@200&display=swap');\n\nbody {\n    min-height: 100vh;\n    background: lightblue;\n}\n\n.grid-container {\n    min-height: 100vh;\n    background: hsl(358, 91%, 96%);\n    display: grid;\n    grid-template-columns: max(236px, 16%) 1fr;\n    column-gap: 5px;\n}\n\n.navbar {\n    display: grid;\n    grid-template-rows: repeat(auto-fit, minmax(24px, min-content));\n    row-gap: 0.4rem;\n    font-family: 'Ubuntu', 'Mulish', Arial, Helvetica, sans-serif;\n    background: var(--palate-cyan);\n    border-right: 1px solid #444;\n    border-radius: 0px 3px 0px 0px;\n    box-shadow: 1px 0px 2px #555;\n    padding: 0.75rem 0;\n}\n\n.navbar h1 {\n    font-family: 'Urbanist', sans-serif;\n    font-size: 2.4rem;\n    font-weight: 200;\n    grid-column: 1 / -1;\n    text-align: center;\n}\n\n.navbar h2 {\n    font-size: 1.3rem;\n    font-weight: 400;\n}\n\n.navbar p {\n    color: #444;\n    font-weight: 400;\n    font-size: 1.1rem;\n}\n\n.navbar > .nav-item p {\n    font-weight: 300;\n    font-size: 1rem;\n\n}\n\n.navbar .icon {\n    cursor: pointer;\n    height: 100%;\n    width: calc(height);\n    padding: 0.25rem;\n}\n\n.navbar .icon:hover {\n    background: rgba(255, 255, 255, 0.6);\n    border-radius: 8px;\n}\n\n.navbar > .nav-item {\n    padding: 0 0.3rem;\n    display: grid;\n    grid-template-columns: 54px 1fr;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.navbar > .nav-item:first-child {\n    font-family: 'Urbanist', Arial, Helvetica, sans-serif;\n    height: min-content;\n    background: hsla(0, 5%, 5%, 0.8);\n    color: #fefefe;\n    padding: 0.5rem;\n    margin-bottom: 0.5rem;\n}\n\n.navbar > .nav-item > img:first-child {\n    justify-self: end;\n}\n\n.navbar > #projects-sidebar > .sidebar-link {\n    font-weight: 300;\n    cursor: pointer;\n    text-decoration: none;\n    color: inherit;\n}\n\n.sidebar-project {\n    margin-bottom: 0.4rem;\n}\n\n.navbar > .end-nav-item {\n    padding-left: 1.25rem;\n}\n\n#project-nav {\n    position: relative; \n}\n\n#projects-sidebar {\n    margin-left: 0.85rem;\n    margin-bottom: 1.8rem;\n}\n\n#content {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(380px, 0.65fr));\n    grid-template-rows: repeat(auto-fit, minmax(360px, min-content));\n    gap: 1.75rem;\n    padding: 1rem 2.25rem 2rem;\n    letter-spacing: 0.015rem;\n}\n\n.project-card {\n    border: 1px solid #333;\n    box-shadow: 1px 1px 2px lightgray;\n    border-radius: 1rem;\n    background: var(--palate-linen);\n    padding: 0.9rem;\n    margin: 0.5rem 0.5rem 0;\n    min-height: 360px;\n    height: min-content;\n}\n\n.project-header {\n    font-family: 'Ubuntu', 'Mulish', Helvetica, 'Arial', sans-serif;\n    font-weight: 200;\n    font-size: 1.1rem;\n    padding: 0.25rem 0.35rem;\n    border-bottom: 1px solid gray;\n    margin-bottom: 0.6rem;\n    justify-content: space-between;\n    display: flex;\n    align-items: center;\n}\n\n.project-header > .project-icons {\n    margin-left: auto;\n    display: flex;\n    gap: 0.75rem;\n}\n\n.project-header > h2 {\n    font-weight: lighter;\n}\n\n.project-header > .project-icons > * {\n    width: 26px;\n    height: 26px;\n    cursor: pointer;\n}\n\n.task-container {\n    margin-top: 0.4rem;\n    background: #fefefe;\n    border-radius: 8px;\n    border: 1px solid lightgrey;\n    font-size: 0.9em;\n}\n\n.task-body {\n    display: flex;\n    justify-content: space-between;\n    border-top: 1px solid lightgray;\n    padding: 0.1rem 0.25rem 0.25rem;\n    margin: 0 0.5rem;\n    gap: 0.5rem;\n}\n\n.task-icons-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    gap: 0.25rem;\n    margin: 0.2rem 0;\n}\n\n.task-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    cursor: pointer;\n    gap: 0.9rem;\n    padding: 0.3rem 0.65rem;\n    font-weight: 300;\n}\n\n.task-header > p:first-child {\n    font-size: 1rem;\n    font-weight: 600;\n    margin-right: auto;\n}\n\n.task-header > p:nth-child(2) {\n    min-width: max-content;\n}\n\n.task-header > .icon-expand {\n    min-width: 18px;\n    width: 18px;\n    height: calc(width);\n}\n\n.task-body > * {\n    margin-top: 0.2rem;\n}\n\n.task-info {\n    width: 100%;\n    padding: 0 0.25rem 0 0;\n    margin-bottom: 0.2rem;\n    display: grid;\n    grid-template-columns: max-content 1fr;\n    row-gap: 0.5rem;\n    align-items: center;\n}\n\n.task-info > p:first-child {\n    grid-column: 1 / -1;\n    font-weight: 300;\n    justify-self: start;\n}\n\n.task-info > .completion-status {\n    font-size: 0.85rem;\n    justify-self: end;\n}\n\n.task-priority {\n    border-radius: 1.4rem;\n    width: min-content;\n    font-size: 0.58rem;\n    font-weight: 700;\n    padding: 0.1rem 0.45rem;\n}\n\n.task-icons-container > * {\n    height: 18px;\n    width: 18px;\n    cursor: pointer;\n}\n\n.form-container {\n    position: relative;\n}\n\nform {\n    font-size: 0.9rem;\n    font-family: 'Ubuntu', Arial, Helvetica, sans-serif;\n    z-index: 1;\n    position: absolute;\n    top: 19px;\n    left: 20px;\n    padding: 0.65rem;\n    height: max-content;\n    width: 220px;\n    background: #fefefe;\n    border: 2px solid var(--palate-light-purple);\n    border-radius: 8px;\n}\n\nform input, select, option {\n    outline: none;\n    height: 1.1rem;\n    width: 10.5rem;\n    font-size: 0.8rem;\n    display: inline;\n    margin: 0.2rem 0 0.4rem;\n    padding: 3px;\n    border-radius: 5px;\n}\n\nform input[type=checkbox] {\n    width: 1rem;\n}\n\nform select {\n    height: 1.5rem;\n    width: 4.5rem;\n}\n\nform input:invalid {\n    border: 1px solid orangered;\n}\n\nform input:valid {\n    border: 1px solid lightgray;\n}\n\nform input:focus {\n    outline: none;\n    border: 1px solid gray;\n    box-shadow: inset 1px 1px lightgray,\n                inset -1px -1px lightgray;\n}\n\nform label, button {\n    font-size: 0.9rem;\n    display: block;\n    width: max-content;\n    font-weight: 400;\n}\n\nform > .form-title {\n    border-bottom: 1px solid lightgray;\n    margin-bottom: 0.5rem;\n}\n\nform h4 {\n    font-weight: 500;\n}\n\nform > .form-row {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0 0.1rem;\n    margin: 0.15rem 0;\n}\n\nform > #delete-row {\n    justify-content: flex-start;\n    align-items: center;\n    gap: 0.45rem;\n    margin-left: 0.05rem;\n}\n\nform button {\n    padding: 0.3rem 0.4rem;\n    background: var(--palate-light-purple);\n    border-radius: 14px;\n    border: 1px solid #666;\n    box-shadow: 1px 1px 1px lightgray;\n    margin-left: auto;\n    margin-top: 0.25rem;\n    cursor: pointer;\n}\n\n#project-form {\n    top: unset;\n    bottom: 48px;\n    left: 30px;\n    width: 240px;\n}\n"],sourceRoot:""}]);const A=u},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,i,o){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(a[d]=!0)}for(var c=0;c<t.length;c++){var u=[].concat(t[c]);r&&a[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),e.push(u))}},e}},667:t=>{t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var o={},a=[],s=0;s<t.length;s++){var d=t[s],c=r.base?d[0]+r.base:d[0],u=o[c]||0,l="".concat(c," ").concat(u);o[c]=u+1;var A=n(l),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==A)e[A].references++,e[A].updater(m);else{var p=i(m,r);r.byIndex=s,e.splice(s,0,{identifier:l,updater:p,references:1})}a.push(l)}return a}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var o=r(t=t||[],i=i||{});return function(t){t=t||[];for(var a=0;a<o.length;a++){var s=n(o[a]);e[s].references--}for(var d=r(t,i),c=0;c<o.length;c++){var u=n(o[c]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}o=d}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},495:(t,e,n)=>{t.exports=n.p+"0dd2d5986e2731a16ee7.ttf"}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,exports:{}};return t[r](o,o.exports,n),o.exports}n.m=t,n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");if(r.length)for(var i=r.length-1;i>-1&&!t;)t=r[i--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{var t=n(379),e=n.n(t),r=n(795),i=n.n(r),o=n(569),a=n.n(o),s=n(565),d=n.n(s),c=n(216),u=n.n(c),l=n(589),A=n.n(l),m=n(28),p={};function h(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof e||"[object String]"===e?new Date(t):new Date(NaN)}function f(t){if(!(e=t,e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)||"number"==typeof t))return!1;var e;const n=h(t);return!isNaN(Number(n))}p.styleTagTransform=A(),p.setAttributes=d(),p.insert=a().bind(null,"head"),p.domAPI=i(),p.insertStyleElement=u(),e()(m.Z,p),m.Z&&m.Z.locals&&m.Z.locals;const g={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function b(t){return(e={})=>{const n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const C={date:b({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:b({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:b({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},y={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function B(t){return(e,n)=>{let r;if("formatting"===(n?.context?String(n.context):"standalone")&&t.formattingValues){const e=t.defaultFormattingWidth||t.defaultWidth,i=n?.width?String(n.width):e;r=t.formattingValues[i]||t.formattingValues[e]}else{const e=t.defaultWidth,i=n?.width?String(n.width):t.defaultWidth;r=t.values[i]||t.values[e]}return r[t.argumentCallback?t.argumentCallback(e):e]}}const x={ordinalNumber:(t,e)=>{const n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:B({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:B({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:B({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:B({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:B({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function w(t){return(e,n={})=>{const r=n.width,i=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],o=e.match(i);if(!o)return null;const a=o[0],s=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],d=Array.isArray(s)?function(t,e){for(let e=0;e<t.length;e++)if(t[e].test(a))return e}(s):function(t,e){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&t[e].test(a))return e}(s);let c;return c=t.valueCallback?t.valueCallback(d):d,c=n.valueCallback?n.valueCallback(c):c,{value:c,rest:e.slice(a.length)}}}const I={ordinalNumber:(v={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,e={})=>{const n=t.match(v.matchPattern);if(!n)return null;const r=n[0],i=t.match(v.parsePattern);if(!i)return null;let o=v.valueCallback?v.valueCallback(i[0]):i[0];return o=e.valueCallback?e.valueCallback(o):o,{value:o,rest:t.slice(r.length)}}),era:w({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:w({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:w({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:w({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:w({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};var v;const k={code:"en-US",formatDistance:(t,e,n)=>{let r;const i=g[t];return r="string"==typeof i?i:1===e?i.one:i.other.replace("{{count}}",e.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:C,formatRelative:(t,e,n,r)=>y[t],localize:x,match:I,options:{weekStartsOn:0,firstWeekContainsDate:1}};let S={};function E(){return S}Math.pow(10,8);const j=6048e5,M=864e5;function D(t){const e=h(t);return e.setHours(0,0,0,0),e}function q(t){const e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}function T(t,e){return t instanceof Date?new t.constructor(e):new Date(e)}function P(t){const e=h(t);return function(t,e){const n=D(t),r=D(e),i=n.getTime()-q(n),o=r.getTime()-q(r);return Math.round((i-o)/M)}(e,function(t){const e=h(t),n=T(t,0);return n.setFullYear(e.getFullYear(),0,1),n.setHours(0,0,0,0),n}(e))+1}function Y(t,e){const n=E(),r=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,i=h(t),o=i.getDay(),a=(o<r?7:0)+o-r;return i.setDate(i.getDate()-a),i.setHours(0,0,0,0),i}function W(t){return Y(t,{weekStartsOn:1})}function z(t){const e=h(t),n=e.getFullYear(),r=T(t,0);r.setFullYear(n+1,0,4),r.setHours(0,0,0,0);const i=W(r),o=T(t,0);o.setFullYear(n,0,4),o.setHours(0,0,0,0);const a=W(o);return e.getTime()>=i.getTime()?n+1:e.getTime()>=a.getTime()?n:n-1}function O(t){const e=h(t),n=W(e).getTime()-function(t){const e=z(t),n=T(t,0);return n.setFullYear(e,0,4),n.setHours(0,0,0,0),W(n)}(e).getTime();return Math.round(n/j)+1}function L(t,e){const n=h(t),r=n.getFullYear(),i=E(),o=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??i.firstWeekContainsDate??i.locale?.options?.firstWeekContainsDate??1,a=T(t,0);a.setFullYear(r+1,0,o),a.setHours(0,0,0,0);const s=Y(a,e),d=T(t,0);d.setFullYear(r,0,o),d.setHours(0,0,0,0);const c=Y(d,e);return n.getTime()>=s.getTime()?r+1:n.getTime()>=c.getTime()?r:r-1}function N(t,e){const n=h(t),r=Y(n,e).getTime()-function(t,e){const n=E(),r=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,i=L(t,e),o=T(t,0);return o.setFullYear(i,0,r),o.setHours(0,0,0,0),Y(o,e)}(n,e).getTime();return Math.round(r/j)+1}function H(t,e){return(t<0?"-":"")+Math.abs(t).toString().padStart(e,"0")}const U={y(t,e){const n=t.getFullYear(),r=n>0?n:1-n;return H("yy"===e?r%100:r,e.length)},M(t,e){const n=t.getMonth();return"M"===e?String(n+1):H(n+1,2)},d:(t,e)=>H(t.getDate(),e.length),a(t,e){const n=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(t,e)=>H(t.getHours()%12||12,e.length),H:(t,e)=>H(t.getHours(),e.length),m:(t,e)=>H(t.getMinutes(),e.length),s:(t,e)=>H(t.getSeconds(),e.length),S(t,e){const n=e.length,r=t.getMilliseconds();return H(Math.floor(r*Math.pow(10,n-3)),e.length)}},F={G:function(t,e,n){const r=t.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){const e=t.getFullYear(),r=e>0?e:1-e;return n.ordinalNumber(r,{unit:"year"})}return U.y(t,e)},Y:function(t,e,n,r){const i=L(t,r),o=i>0?i:1-i;return"YY"===e?H(o%100,2):"Yo"===e?n.ordinalNumber(o,{unit:"year"}):H(o,e.length)},R:function(t,e){return H(z(t),e.length)},u:function(t,e){return H(t.getFullYear(),e.length)},Q:function(t,e,n){const r=Math.ceil((t.getMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return H(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){const r=Math.ceil((t.getMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return H(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){const r=t.getMonth();switch(e){case"M":case"MM":return U.M(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){const r=t.getMonth();switch(e){case"L":return String(r+1);case"LL":return H(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){const i=N(t,r);return"wo"===e?n.ordinalNumber(i,{unit:"week"}):H(i,e.length)},I:function(t,e,n){const r=O(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):H(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getDate(),{unit:"date"}):U.d(t,e)},D:function(t,e,n){const r=P(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):H(r,e.length)},E:function(t,e,n){const r=t.getDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){const i=t.getDay(),o=(i-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(o);case"ee":return H(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(i,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(i,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(i,{width:"short",context:"formatting"});default:return n.day(i,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){const i=t.getDay(),o=(i-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(o);case"cc":return H(o,e.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(i,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(i,{width:"narrow",context:"standalone"});case"cccccc":return n.day(i,{width:"short",context:"standalone"});default:return n.day(i,{width:"wide",context:"standalone"})}},i:function(t,e,n){const r=t.getDay(),i=0===r?7:r;switch(e){case"i":return String(i);case"ii":return H(i,e.length);case"io":return n.ordinalNumber(i,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){const r=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){const r=t.getHours();let i;switch(i=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(i,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(i,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(i,{width:"narrow",context:"formatting"});default:return n.dayPeriod(i,{width:"wide",context:"formatting"})}},B:function(t,e,n){const r=t.getHours();let i;switch(i=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(i,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(i,{width:"narrow",context:"formatting"});default:return n.dayPeriod(i,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){let e=t.getHours()%12;return 0===e&&(e=12),n.ordinalNumber(e,{unit:"hour"})}return U.h(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getHours(),{unit:"hour"}):U.H(t,e)},K:function(t,e,n){const r=t.getHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):H(r,e.length)},k:function(t,e,n){let r=t.getHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):H(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getMinutes(),{unit:"minute"}):U.m(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getSeconds(),{unit:"second"}):U.s(t,e)},S:function(t,e){return U.S(t,e)},X:function(t,e,n,r){const i=(r._originalDate||t).getTimezoneOffset();if(0===i)return"Z";switch(e){case"X":return X(i);case"XXXX":case"XX":return Q(i);default:return Q(i,":")}},x:function(t,e,n,r){const i=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return X(i);case"xxxx":case"xx":return Q(i);default:return Q(i,":")}},O:function(t,e,n,r){const i=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+$(i,":");default:return"GMT"+Q(i,":")}},z:function(t,e,n,r){const i=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+$(i,":");default:return"GMT"+Q(i,":")}},t:function(t,e,n,r){const i=r._originalDate||t;return H(Math.floor(i.getTime()/1e3),e.length)},T:function(t,e,n,r){return H((r._originalDate||t).getTime(),e.length)}};function $(t,e=""){const n=t>0?"-":"+",r=Math.abs(t),i=Math.floor(r/60),o=r%60;return 0===o?n+String(i):n+String(i)+e+H(o,2)}function X(t,e){return t%60==0?(t>0?"-":"+")+H(Math.abs(t)/60,2):Q(t,e)}function Q(t,e=""){const n=t>0?"-":"+",r=Math.abs(t);return n+H(Math.floor(r/60),2)+e+H(r%60,2)}const R=(t,e)=>{switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},G=(t,e)=>{switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},Z={p:G,P:(t,e)=>{const n=t.match(/(P+)(p+)?/)||[],r=n[1],i=n[2];if(!i)return R(t,e);let o;switch(r){case"P":o=e.dateTime({width:"short"});break;case"PP":o=e.dateTime({width:"medium"});break;case"PPP":o=e.dateTime({width:"long"});break;default:o=e.dateTime({width:"full"})}return o.replace("{{date}}",R(r,e)).replace("{{time}}",G(i,e))}},J=["D","DD"],_=["YY","YYYY"];function V(t,e,n){if("YYYY"===t)throw new RangeError(`Use \`yyyy\` instead of \`YYYY\` (in \`${e}\`) for formatting years to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("YY"===t)throw new RangeError(`Use \`yy\` instead of \`YY\` (in \`${e}\`) for formatting years to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("D"===t)throw new RangeError(`Use \`d\` instead of \`D\` (in \`${e}\`) for formatting days of the month to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("DD"===t)throw new RangeError(`Use \`dd\` instead of \`DD\` (in \`${e}\`) for formatting days of the month to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`)}const K=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,tt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,et=/^'([^]*?)'?$/,nt=/''/g,rt=/[a-zA-Z]/;function it(t,e,n){const r=E(),i=n?.locale??r.locale??k,o=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,a=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,s=h(t);if(!f(s))throw new RangeError("Invalid time value");const d={firstWeekContainsDate:o,weekStartsOn:a,locale:i,_originalDate:s};return e.match(tt).map((function(t){const e=t[0];return"p"===e||"P"===e?(0,Z[e])(t,i.formatLong):t})).join("").match(K).map((function(r){if("''"===r)return"'";const o=r[0];if("'"===o)return function(t){const e=t.match(et);return e?e[1].replace(nt,"'"):t}(r);const a=F[o];if(a)return n?.useAdditionalWeekYearTokens||(c=r,-1===_.indexOf(c))||V(r,e,String(t)),!n?.useAdditionalDayOfYearTokens&&function(t){return-1!==J.indexOf(t)}(r)&&V(r,e,String(t)),a(s,r,i.localize,d);var c;if(o.match(rt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("")}function ot(t,e,...n){const r=document.createElement(t);if(e&&r.setAttribute("id",e),n)for(const t of n)r.classList.add(t);return r}function at(t,e,n,...r){const i=document.createElement("form");e&&i.classList.add(e),n&&i.setAttribute("id",n);const o=ot("div","","form-title"),a=ot("h4");a.textContent=t,o.appendChild(a),i.appendChild(o);for(const t of r){const e=ot("label");e.setAttribute("for",`${t}`);const n=ot("input",`${t}`);n.setAttribute("name",`${t}`),i.appendChild(e),i.appendChild(n)}return i}function st(t){return it(t.replace(/-/g,"/"),"MM-dd-yyyy")}function dt(t){t.splice(t.indexOf(this),1),ct()}function ct(){localStorage.setItem("projects",JSON.stringify(ut))}const ut=[];function lt(t){const e={title:t,tasks:[],editTitle:At,removeFromList:dt};ut.push(e),ct()}function At(t){this.title=t,ct()}function mt(t,e,n,r,{tasks:i},o){const a={title:t,description:e,due:n=st(n),priority:r,completed:!0===o,complete:pt,editTask:ht,removeFromList:dt};i.push(a),ct()}function pt(){!1===this.completed?this.completed=!0:this.completed=!1,ct()}function ht(t,e,n,r){n=st(n),this.title=t,this.description=e,this.due=n,this.priority=r,ct()}const ft=n.p+"644a4644e7eebd6891eb.svg",gt=n.p+"aaac22ff81a9d35f5808.svg";const bt=n.p+"20f6f433f27897d0f01c.svg",Ct=n.p+"dbc5b0bcf876b2a5a153.svg";function yt(t,e){const n=ut.indexOf(e),r=ut[n].tasks.indexOf(t),i=ot("div","","task-container"),o=ot("div","","task-header"),a=ot("div","","task-body-container");a.setAttribute("hidden",!0),o.addEventListener("click",(()=>{a.toggleAttribute("hidden"),u.src!==Ct?u.src=Ct:u.src=bt}));const s=ot("div","","task-body"),d=ot("p");d.textContent=t.title,o.appendChild(d);const c=ot("p");c.textContent=`Due ${t.due}`,o.appendChild(c);const u=ot("img","","icon-expand");u.src=bt,o.appendChild(u),i.appendChild(o);const l=ot("div","","task-icons-container"),A=function(t,e){const n=ot("img",t,"edit-task-icon");n.src=ft,n.setAttribute("alt","Edit");const r=document.querySelector(".project-header"),i=document.querySelector(".form-container");return r.contains(i)?n.addEventListener("click",(()=>{const n=function(t,e){const n=at("Edit/Delete Task","edit-task",e,"edit-task-name","edit-task-description","edit-task-due","delete-task"),r=ut[t].tasks[e];n.firstElementChild.nextElementSibling.textContent="Task ";const i=n.querySelector("#edit-task-name");i.setAttribute("type","text"),i.setAttribute("name","edit-task-name"),i.setAttribute("value",r.title),i.nextElementSibling.textContent="Description ";const o=n.querySelector("#edit-task-description");o.setAttribute("type","text"),o.setAttribute("name","task-description"),o.setAttribute("value",r.description),o.nextElementSibling.textContent="Due ";const a=n.querySelector("#edit-task-due");a.setAttribute("type","date"),a.setAttribute("name","task-due-date"),a.setAttribute("value",it(r.due,"yyyy-MM-dd"));const s=ot("label");s.setAttribute("for","edit-task-priority"),s.textContent="Priority ";const d=ot("select","edit-task-priority");d.setAttribute("name","edit-task-priority");const c=ot("option");c.setAttribute("value","high"),"high"===r.priority?c.setAttribute("selected",!0):r.priority,c.textContent="High",d.appendChild(c);const u=ot("option");u.setAttribute("value","normal"),"normal"===r.priority?u.setAttribute("selected",!0):r.priority,u.textContent="Normal",d.appendChild(u);const l=ot("option");l.setAttribute("value","low"),"low"===r.priority?l.setAttribute("selected",!0):r.priority,l.textContent="Low",d.appendChild(l);const A=ot("div","delete-row","form-row"),m=a.nextElementSibling;m.textContent="Remove Task";const p=n.querySelector("#delete-task");p.setAttribute("type","checkbox"),p.setAttribute("name","delete-task"),A.appendChild(p),A.appendChild(m),n.append(A);const h=ot("button","edit-task-button","confirm");return h.textContent="Edit Task",n.insertBefore(s,A),n.insertBefore(d,A),n.appendChild(h),n}(e,t),r=document.querySelector(`#form-container-${e}`);r.hasChildNodes()?r.removeChild(r.lastChild):(r.appendChild(n),document.querySelector("#edit-task-button").addEventListener("click",(n=>{n.preventDefault();const i=document.querySelector("#edit-task-name"),o=document.querySelector("#edit-task-description"),a=document.querySelector("#edit-task-due"),s=document.querySelector("#edit-task-priority"),d=document.querySelector("#delete-task"),c=ut[e],u=ut[e].tasks[t];u.editTask(i.value,o.value,a.value,s.value),d.checked&&u.removeFromList(c.tasks),r.removeChild(r.lastChild),vt(),It()})))})):n.style.opacity="0.25",n}(r,n);l.appendChild(A);const m=ot("input","","checkbox-complete");m.setAttribute("type","checkbox"),m.addEventListener("click",(()=>{t.complete(),!0===t.completed?(g.textContent="Complete",i.style.background="lightgreen",i.style.opacity="0.55",o.style.cssText="text-decoration: line-through"):(g.textContent="Pending Completion",i.style.background="#fefefe",i.style.opacity="unset",o.style.cssText="text-decoration: none;")})),l.appendChild(m);const p=ot("div","","task-info"),h=ot("p");h.textContent=t.description,p.appendChild(h);const f=ot("p","","task-priority");f.textContent="PRIORITY","high"===t.priority?(f.style.cssText="background: rgba(255,52,0, 0.9); color: #fafafa; font-weight: bolder; box-shadow: 0 0 4px rgba(255,53,0,0.9);",i.style.cssText="box-shadow: inset 1px 0 2px rgba(255,52,0, 0.95)"):"normal"===t.priority?(f.style.cssText="background: rgba(255, 222, 24, 0.9); box-shadow: 0 0 3px rgba(255,222,24,0.9);",i.style.cssText="box-shadow: inset 1px 0 2px rgba(255, 222, 24, 0.95)"):(f.style.cssText="background: rgba(140, 222, 82, 0.8); box-shadow: 0 0 3px rgba(140,222,82,0.8);",i.style.cssText="box-shadow: inset 1px 0 2px rgba(140, 222, 82, 0.95)"),p.appendChild(f);const g=ot("p","","completion-status");return!0===t.completed?(g.textContent="Complete",m.setAttribute("checked",!0),i.style.background="lightgreen",i.style.opacity="0.55",o.style.cssText="text-decoration: line-through;"):(g.textContent="Pending Completion",i.style.background="#fefefe",i.style.opacity="unset",o.style.cssText="text-decoration: none;"),p.appendChild(g),s.appendChild(p),s.appendChild(l),a.appendChild(s),i.appendChild(a),i}const Bt=document.querySelector("#content"),xt=document.querySelector("#projects-sidebar");function wt(t){const e=`${ut.indexOf(t)}`,n=ot("div",`card-${e}`,"project-card"),r=ot("div","","project-header"),i=ot("div",`form-container-${e}`,"form-container");r.appendChild(i);const o=ot("h2");o.textContent=t.title,r.appendChild(o);const a=ot("div","","project-icons");r.appendChild(a);const s=function(t){const e=ot("img",t,"icon-project-edit");return e.src=ft,e.setAttribute("alt","Edit"),e.addEventListener("click",(()=>{const e=function(t){const e=at("Edit Project","edit-project",t,"edit-project-title","delete-project");e.firstElementChild.nextElementSibling.textContent="Title ";const n=e.querySelector("#edit-project-title");n.setAttribute("type","text"),n.setAttribute("name","edit-project-title"),n.setAttribute("value",`${ut[t].title}`);const r=ot("div","delete-row","form-row"),i=n.nextElementSibling;i.textContent="Remove Project";const o=e.querySelector("#delete-project");o.setAttribute("type","checkbox"),o.setAttribute("name","delete-project"),r.appendChild(o),r.appendChild(i),e.appendChild(r);const a=ot("button","edit-project-button","confirm");return a.textContent="Confirm",e.appendChild(a),e}(t),n=document.querySelector(`#form-container-${t}`);n.hasChildNodes()?n.removeChild(n.lastChild):(n.appendChild(e),document.querySelector("#edit-project-button").addEventListener("click",(t=>{t.preventDefault();const r=document.querySelector("#edit-project-title"),i=document.querySelector("#delete-project"),o=ut[e.id];o.editTitle(r.value),i.checked&&o.removeFromList(ut),n.removeChild(n.lastChild),vt(),It()})))})),e}(e);a.appendChild(s);const d=function(t){const e=ot("img",t,"icon-task-add");return e.src=gt,e.setAttribute("alt","Add"),e.addEventListener("click",(()=>{const e=function(t){const e=at("Add To-Do","add-task",t,"task-name","task-description","task-due");e.firstChild.nextElementSibling.textContent="Task ";const n=e.querySelector("#task-name");n.setAttribute("type","text"),n.setAttribute("name","task-name"),n.setAttribute("placeholder","Your to-do Task"),n.nextElementSibling.textContent="Description ";const r=e.querySelector("#task-description");r.setAttribute("type","text"),r.setAttribute("name","task-description"),r.setAttribute("placeholder","(optional)"),r.nextElementSibling.textContent="Due ";const i=e.querySelector("#task-due"),o=it(new Date,"yyyy-MM-dd");i.setAttribute("type","date"),i.setAttribute("name","task-due-date"),i.setAttribute("value",`${o}`);const a=ot("label");a.setAttribute("for","task-priority"),a.textContent="Priority ";const s=ot("select","task-priority");s.setAttribute("name","task-priority");const d=ot("option");d.setAttribute("value","high"),d.textContent="High",s.appendChild(d);const c=ot("option");c.setAttribute("value","normal"),c.textContent="Normal",c.setAttribute("selected",!0),s.appendChild(c);const u=ot("option");u.setAttribute("value","low"),u.textContent="Low",s.appendChild(u);const l=ot("button","add-task-button","confirm");return l.textContent="Add Task",e.appendChild(a),e.appendChild(s),e.appendChild(l),e}(t),n=document.querySelector(`#form-container-${t}`);n.hasChildNodes()?n.removeChild(n.lastChild):(n.appendChild(e),document.querySelector("#add-task-button").addEventListener("click",(t=>{t.preventDefault();const n=document.querySelector("#task-name"),r=document.querySelector("#task-description"),i=document.querySelector("#task-due"),o=document.querySelector("#task-priority"),a=ut[e.id];mt(n.value,r.value,i.value,o.value,a),vt(),It()})))})),e}(e);a.appendChild(d),n.appendChild(r),Bt.appendChild(n);const{tasks:c}=t;for(const e of c){const r=yt(e,t);n.appendChild(r)}const u=ot("a","","sidebar-link");u.setAttribute("href",`#card-${e}`);const l=ot("p","","sidebar-project");l.textContent=t.title,u.appendChild(l),xt.appendChild(u)}function It(){for(const t of ut)wt(t)}function vt(){for(;Bt.firstChild;)Bt.removeChild(Bt.lastChild);for(;xt.firstChild;)xt.removeChild(xt.lastChild)}const kt=document.querySelector("#content"),St=document.querySelector("#projects");function Et(){const t=ot("div","daily-card","project-card","task-card"),e=ot("div","","project-header"),n=ot("h2");n.textContent="Today's To-Dos",e.appendChild(n),t.appendChild(e),kt.appendChild(t);for(const e of ut){const{tasks:n}=e;for(const r of n)if(it(new Date,"MM-dd-yyyy")===it(r.due,"MM-dd-yyyy")){const n=yt(r,e);t.appendChild(n)}}St.addEventListener("click",(()=>{vt(),It()}))}const jt=document.querySelector("#add-project"),Mt=document.querySelector("#project-form"),Dt=document.querySelector("#submit-project"),qt=document.querySelector("#project-title"),Tt=document.querySelector("#delete-completed"),Pt=document.querySelector("#content"),Yt=document.querySelector("#daily-tasks");!function(){const t=st((new Date).toLocaleDateString());if(localStorage.getItem("projects")){const t=JSON.parse(localStorage.getItem("projects"));t.forEach((e=>{lt(e.title);const{tasks:n}=e;n.forEach((n=>{mt(n.title,n.description,n.due,n.priority,ut[t.indexOf(e)],n.completed)}))}))}else lt("Cat Care"),mt("Breakfast 6AM","1/4 cup dry food",t,"high",ut[0]),mt("AM Snack","6 greenies",t,"low",ut[0]),mt("Brush","",t,"normal",ut[0]),mt("Dinner 6PM","1 can purina wet food",t,"high",ut[0])}(),It(),jt.addEventListener("click",(()=>{Mt.toggleAttribute("hidden")})),Dt.addEventListener("click",(t=>{t.preventDefault(),lt(qt.value),Mt.toggleAttribute("hidden"),vt(),It()})),Yt.addEventListener("click",(()=>{vt(),Et()})),Tt.addEventListener("click",(()=>{!function(){for(const t of ut){const{tasks:e}=t;t.tasks=e.filter((t=>!1===t.completed))}ct()}(),Pt.contains(document.getElementById("daily-card"))?(vt(),Et()):(vt(),It())})),console.log("\n\nPage Initialized")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,